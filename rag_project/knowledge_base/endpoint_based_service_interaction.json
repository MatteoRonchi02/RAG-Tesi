{
  "smell_name": "endpoint based service interaction",
  "brief_description": "this happens when one service reaches out to another by using a hard-coded URL (for example, a fixed IP and port) instead of looking up the endpoint dynamically. The result? Your system stays rigid, hard to scale, and brittle whenever you move or replace a service.",
  "microservices_context": [
    "you lose out on dynamic discovery and automatic scaling of services.",
    "if you spin up, move, or replace a service instance, anyone pointing at the old address will break immediately."
  ],
  "manifestations": [
    {
      "artifact_type": "Node.js Code (Payments Service - Direct Pod Name Resolution)",
      "language": "Node.js",
      "negative_example": "// paymentservice/server.js\n//... attempting to resolve a specific pod name directly\nconst emailServiceUrl = 'http://emailservice-pod-abcde.default.svc.cluster.local:8080';\naxios.post(emailServiceUrl, emailData);",
      "explanation": "A hypothetical Node.js `paymentservice` directly constructing a URL using an ephemeral pod name (`emailservice-pod-abcde`). While technically resolvable within Kubernetes, relying on specific pod names bypasses load balancing and is fragile if the pod is recreated or scaled."
    },
    {
      "artifact_type": "Python Code (Recommendation Service - DNS Lookup in Code)",
      "language": "Python",
      "negative_example": "import socket\n\ndef get_product_catalog_ip():\n    # Manual DNS lookup instead of relying on Kubernetes DNS resolution\n    ip_addr = socket.gethostbyname('productcatalogservice') # Still resolves, but less robust if not managed by platform\n    return f'http://{ip_addr}:3550'",
      "explanation": "A hypothetical Python `recommendationservice` explicitly performing a DNS lookup for `productcatalogservice` within its code to get an IP. While `socket.gethostbyname` would resolve the Kubernetes service DNS, this pattern is less robust than relying on the platform's native service discovery mechanisms (e.g., environment variables for service addresses) as it adds unnecessary complexity and potential for misconfiguration."
    },
    {
      "artifact_type": "Kubernetes ConfigMap (Hardcoded External Dependency)",
      "language": "YAML",
      "negative_example": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: external-db-config\ndata:\n  DATABASE_URL: \"jdbc:mysql://192.168.1.100:3306/mydb\"",
      "explanation": "A ConfigMap containing a hardcoded IP address for an external database. While not an internal microservice, this illustrates the smell of relying on a fixed, potentially unstable network endpoint, making the application brittle to infrastructure changes."
    },
    {
      "artifact_type": "C# Code (Cart Service - Configuration File with IP)",
      "language": "C#",
      "negative_example": "// appsettings.json or similar config file\n{\n  \"RedisSettings\": {\n    \"Address\": \"172.17.0.2:6379\" // Hardcoded Redis IP\n  }\n}",
      "explanation": "If the `cartservice` (C#) configured its Redis dependency  with a hardcoded IP address in a configuration file. This would make the `cartservice` fragile, as the Redis instance's IP could change, leading to connectivity issues and requiring manual updates and redeployments."
    },
    {
      "artifact_type": "Java Code (Ad Service - Direct Connection String)",
      "language": "Java",
      "negative_example": "// AdService.java\n//... in a method making a call to productcatalogservice\n// Channel channel = ManagedChannelBuilder.forAddress(\"10.0.0.6\", 3550)\n//   .usePlaintext()\n//   .build();",
      "explanation": "A hypothetical `adservice` directly connecting to `productcatalogservice` using a hardcoded internal IP address (`10.0.0.6`). This creates a direct dependency on an unstable network location, which is prone to breaking when the `productcatalogservice` pod restarts or moves."
    },
    {
      "artifact_type": "Docker Compose File (Legacy Direct Linking)",
      "language": "YAML",
      "negative_example": "services:\n  frontend:\n    build:./frontend\n    links:\n      - productcatalogservice:productcatalogservice_legacy_ip\n  productcatalogservice:\n    build:./productcatalogservice",
      "explanation": "Using Docker Compose `links` (a legacy feature) to connect services, which relies on hostname resolution that might not translate well to dynamic Kubernetes environments or could lead to hardcoded aliases. While Docker Compose provides DNS, `links` can encourage a mindset of direct, static connections rather than dynamic service discovery."
    },
    {
      "artifact_type": "Go Code (Checkout Service - Manual Endpoint List)",
      "language": "Go",
      "negative_example": "var cartServiceEndpoints =string{\n    \"cartservice-pod-a:7070\",\n    \"cartservice-pod-b:7070\",\n} // Manual list of specific pod endpoints",
      "explanation": "A hypothetical `checkoutservice` maintaining a manual list of `cartservice` pod endpoints. This approach is highly brittle, as it requires manual updates whenever pods are added, removed, or change, and it bypasses Kubernetes' native load balancing and service discovery."
    },
    {
      "artifact_type": "Kubernetes Deployment (Missing Service Account)",
      "language": "YAML",
      "negative_example": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cartservice\n  labels:\n    app: cartservice\nspec:\n  selector:\n    matchLabels:\n      app: cartservice\n  template:\n    metadata:\n      labels:\n        app: cartservice\n    spec:\n      # serviceAccountName: cartservice # Missing service account",
      "explanation": "While not directly about IP addressing, omitting the `serviceAccountName`  for a deployment can indicate a lack of proper integration with Kubernetes' identity and discovery mechanisms. This can implicitly lead to services relying on less robust methods for finding dependencies if the platform's native features aren't fully leveraged."
    },
    {
      "artifact_type": "Configuration File (Environment Variable with IP)",
      "language": "Text/Env",
      "negative_example": "SHIPPING_SERVICE_ADDR=10.0.0.7:5000",
      "explanation": "Setting an environment variable with a hardcoded IP address for the `shippingservice`. While environment variables are good for externalizing configuration, using a fixed IP makes the configuration fragile and prone to breakage if the `shippingservice` pod's IP changes."
    }
  ],
  "positive": [
    {
      "artifact_type": "Shell Command (Client for Cart Service REST)",
      "language": "Bash",
      "positive_example": "curl -X 'POST' 'http://cartservice:60000/cart/user_id/abcde' \\ -H 'accept: application/json' \\ -H 'content-type: application/json' \\ -d '{ \"product_id\": \"OLJCESPC7Z\", \"quantity\": 1 }'",
      "explanation": "Similar to the gRPC example, this `curl` command uses `cartservice:60000` for REST communication. The use of the service name `cartservice` instead of an IP address ensures that the client can reliably connect to the `cartservice` regardless of which pod is serving the request or its underlying IP."
    },
    {
      "artifact_type": "Kubernetes Deployment (Cart Service Environment Variable)",
      "language": "YAML",
      "positive_example": "      env:\n      - name: REDIS_ADDR\n        value: \"redis-cart:6379\"",
      "explanation": "From the `cartservice` Kubernetes manifest, the `REDIS_ADDR` environment variable is set to `redis-cart:6379`. `redis-cart` is the Kubernetes Service name for the Redis instance. This is a strong positive example of using logical service names for internal dependencies, ensuring the `cartservice` can always find its Redis backend."
    },
    {
      "artifact_type": "Go Code (Checkout Service - Service Address Configuration)",
      "language": "Go",
      "positive_example": "var (\n\tcartServiceAddr         = os.Getenv(\"CART_SERVICE_ADDR\")\n\tproductCatalogServiceAddr = os.Getenv(\"PRODUCT_CATALOG_SERVICE_ADDR\")\n\tshippingServiceAddr     = os.Getenv(\"SHIPPING_SERVICE_ADDR\")\n\tcurrencyServiceAddr     = os.Getenv(\"CURRENCY_SERVICE_ADDR\")\n\tpaymentServiceAddr      = os.Getenv(\"PAYMENT_SERVICE_ADDR\")\n\temailServiceAddr        = os.Getenv(\"EMAIL_SERVICE_ADDR\")\n\trecommendationServiceAddr = os.Getenv(\"RECOMMENDATION_SERVICE_ADDR\")\n)",
      "explanation": "The `checkoutservice` retrieves its dependent service addresses from environment variables. These environment variables are populated by Kubernetes with service DNS names (e.g., `cartservice:7070`), ensuring that the service does not hardcode endpoints and can adapt to changes in the environment."
    },
    {
      "artifact_type": "Kubernetes Service Definition (Product Catalog Service)",
      "language": "YAML",
      "positive_example": "apiVersion: v1\nkind: Service\nmetadata:\n  name: productcatalogservice\n  labels:\n    app: productcatalogservice\nspec:\n  type: ClusterIP\n  selector:\n    app: productcatalogservice\n  ports:\n  - name: grpc\n    port: 3550\n    targetPort: 3550",
      "explanation": "This Kubernetes `Service` definition for `productcatalogservice` creates a stable internal DNS name (`productcatalogservice`) for the service. Other services can reliably call `productcatalogservice:3550` without needing to know the ephemeral IP addresses of its pods."
    },
    {
      "artifact_type": "Node.js Code (Currency Service - Environment Variable Usage)",
      "language": "Node.js",
      "positive_example": "// currencyservice/server.js\nconst PORT = process.env.PORT || 7000;\n//... gRPC server listens on PORT\n// The service itself doesn't hardcode its own port for internal discovery, \n// relying on Kubernetes service definition.",
      "explanation": "The `currencyservice` uses an environment variable `PORT` to define its listening port. While basic, this indicates that the service's own network configuration is externalized, allowing Kubernetes to define the stable service endpoint (e.g., `currencyservice:7000`) that other services can discover and use."
    },
    {
      "artifact_type": "Python Code (Email Service - Service Discovery via DNS)",
      "language": "Python",
      "positive_example": "# emailservice/email_server.py\n#... assuming similar pattern for service address resolution as Go services\n# For example, if it calls checkoutservice:\n# checkout_service_address = os.getenv('CHECKOUT_SERVICE_ADDR', 'checkoutservice:5050')\n# channel = grpc.insecure_channel(checkout_service_address)",
      "explanation": "If the `emailservice` needs to communicate with other services (e.g., `checkoutservice`), it would typically resolve their addresses via environment variables set by Kubernetes, which contain the stable DNS names. This prevents hardcoding and ensures adaptability within the cluster."
    },
    {
      "artifact_type": "Java Code (Ad Service - gRPC Channel Setup)",
      "language": "Java",
      "positive_example": "// adservice/src/main/java/hipstershop/AdService.java\n// In a client calling adservice (e.g., frontend or recommendationservice):\n// ManagedChannel channel = ManagedChannelBuilder.forAddress(\"adservice\", 9550)\n//   .usePlaintext()\n//   .build();",
      "explanation": "When another service (e.g., `frontend` or `recommendationservice`) makes a gRPC call to `adservice`, it would use `ManagedChannelBuilder.forAddress(\"adservice\", 9550)`. This explicitly uses the Kubernetes service DNS name `adservice` and its gRPC port, reinforcing the pattern of logical service addressing."
    },
    {
      "artifact_type": "Kubernetes Manifest (Service Account for Cart Service)",
      "language": "YAML",
      "positive_example": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: cartservice\n  labels:\n    app: cartservice",
      "explanation": "The existence of a dedicated `ServiceAccount` for `cartservice` is part of Kubernetes' internal identity and access management. While not directly about endpoint resolution, it supports the overall framework where services are managed and discovered by the platform using stable identities, rather than relying on ephemeral network details."
    },
    {
      "artifact_type": "Go Code (Shipping Service - Internal Communication)",
      "language": "Go",
      "positive_example": "// shippingservice/server.go\n//... when calling a dependent service, e.g., location service:\n// locationServiceAddress := os.Getenv(\"LOCATION_SERVICE_ADDR\", \"locationservice:8080\")\n// conn, err := grpc.Dial(locationServiceAddress, grpc.WithInsecure())",
      "explanation": "The `shippingservice` would follow the pattern of retrieving dependent service addresses from environment variables, which are populated by Kubernetes. This ensures that its internal communications are based on stable, logical service names, adapting to the dynamic nature of a containerized environment."
    }
  ],
  "meta_data": {
    "tags": ["hardcoded-endpoint", "service-discovery", "coupling", "scalability", "resilience"],
    "remediation_difficulty": "Medium",
    "impact": "Medium"
  }
}