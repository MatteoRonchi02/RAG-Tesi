{
  "smell_name": "wobbly service interaction",
  "brief_description": "this smell shows up when Service A calls Service B but doesn’t protect itself against B’s failure or slowness. If B hiccups, A also collapses or hangs—triggering cascading errors and breaking the isolation you want in microservices.",
  "microservices_context": [
    "a glitch in one service cascades into others, risking a domino-effect failure.",
    "violates failure isolation—the cornerstone of resilient microservice design.",
    "drags down overall availability when a local issue spreads.",
    "no timeouts, retries, circuit breakers or fallbacks mean the caller just waits or fails hard."
  ],
  "manifestations": [ 
    {
      "artifact_type": "C# Code (Cart Service - No Redis Connection Error Handling)",
      "language": "C#",
      "negative_example": "// In CartService.cs, if Redis connection fails without graceful handling\npublic class CartService : ICartService\n{\n    private readonly ConnectionMultiplexer _redis;\n    public CartService()\n    {\n        _redis = ConnectionMultiplexer.Connect(\"redis-cart:6379\"); // No error handling for connection failure\n    }\n    public async Task AddItem(string userId, CartItem item)\n    {\n        // If _redis is null or disconnected, this will throw an unhandled exception\n        await _redis.GetDatabase().StringSetAsync($\"cart:{userId}\", JsonConvert.SerializeObject(item));\n    }\n}",
      "explanation": "The `cartservice` (C#) failing to handle Redis connection errors gracefully. If Redis is unavailable, the service would throw unhandled exceptions, leading to service crashes or unresponsive behavior, making it 'wobbly' and impacting dependent services like `frontend` and `checkoutservice`."
    },
    {
      "artifact_type": "Node.js Code (Currency Service - Synchronous External API Call)",
      "language": "Node.js",
      "negative_example": "// currencyservice/server.js\n// Synchronous call to external ECB API without timeout or retry\nconst response = await axios.get('https://api.ecb.europa.eu/rates'); // Blocking call\n// If ECB API is slow or down, this service hangs",
      "explanation": "The `currencyservice` makes calls to the European Central Bank. If this external API call is synchronous and lacks timeouts or retry mechanisms, a slow or unresponsive external dependency would cause the `currencyservice` to hang, making it 'wobbly' and impacting the `frontend` service which depends on it]"
    },
    {
      "artifact_type": "Python Code (Email Service - No Fallback for Template Loading)",
      "language": "Python",
      "negative_example": "# emailservice/email_server.py\n# If template loading fails, the service might crash or return internal error\nenv = Environment(loader=FileSystemLoader('templates'))\ntemplate = env.get_template('confirmation.html') # No error handling for missing template",
      "explanation": "The `emailservice` loads an email template. If the template file is missing or corrupted and no error handling or fallback mechanism is in place, the service might fail to start or crash when trying to send an email, making it 'wobbly' and unable to fulfill its function."
    },
    {
      "artifact_type": "Java Code (Ad Service - No Circuit Breaker for Dependent Service)",
      "language": "Java",
      "negative_example": "// AdService.java, making direct calls to productcatalogservice without circuit breaker\nList<Ad> ads = productCatalogServiceClient.getAdsForProducts(productIds); // Direct call\n// If productcatalogservice is overloaded, this will keep sending requests, worsening the problem",
      "explanation": "The `adservice` making repeated, direct calls to an overloaded `productcatalogservice` without a circuit breaker. This would exacerbate the `productcatalogservice`'s issues and cause the `adservice` itself to become 'wobbly' due to accumulating failed requests and timeouts, leading to cascading failure."
    },
    {
      "artifact_type": "Kubernetes Deployment (Missing Liveness/Readiness Probes)",
      "language": "YAML",
      "negative_example": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shippingservice\n  labels:\n    app: shippingservice\nspec:\n  selector:\n    matchLabels:\n      app: shippingservice\n  template:\n    metadata:\n      labels:\n        app: shippingservice\n    spec:\n      containers:\n      - name: server\n        image: shippingservice\n        ports:\n        - containerPort: 5000\n        # No liveness or readiness probes defined",
      "explanation": "A hypothetical `shippingservice` Kubernetes deployment lacking liveness and readiness probes. Kubernetes would continue to route traffic to an unhealthy or unready `shippingservice` pod, leading to failed requests and 'wobbly' behavior for calling services like `checkoutservice`."
    },
    {
      "artifact_type": "Go Code (Product Catalog Service - N+1 Query Problem)",
      "language": "Go",
      "negative_example": "func (pcs *productCatalogService) GetProducts(ctx context.Context, req *pb.GetProductsRequest) (*pb.GetProductsResponse, error) {\n    var products*pb.Product\n    for _, id := range req.ProductIds {\n        // Inefficient: individual database query for each product ID\n        product, err := pcs.db.GetProductByID(id) \n        if err == nil { products = append(products, product) }\n    }\n    return &pb.GetProductsResponse{Products: products}, nil\n}",
      "explanation": "The `productcatalogservice` implementing an N+1 query pattern, where it fetches each product from its data source individually within a loop. For a request involving many products, this creates excessive database calls, leading to high latency and making the `productcatalogservice` itself 'wobbly' under load."
    },
    {
      "artifact_type": "Kubernetes Service (ExternalName Type for Internal Service)",
      "language": "YAML",
      "negative_example": "apiVersion: v1\nkind: Service\nmetadata:\n  name: cartservice\nspec:\n  type: ExternalName\n  externalName: cartservice-legacy.internal.example.com",
      "explanation": "Using an `ExternalName` service type to point an internal service (like `cartservice`) to an external, potentially less reliable DNS entry. While `ExternalName` has its uses, using it for internal, highly available microservices can introduce 'wobbly' behavior if the external DNS or the target it points to is unstable."
    },
    {
      "artifact_type": "Python Code (Load Generator - No Backoff Strategy)",
      "language": "Python",
      "negative_example": "# loadgenerator/loadgen.py\n# If load generator retries immediately on failure without backoff\nwhile True:\n    try:\n        client.get(\"/\")\n    except Exception:\n        pass # Retries immediately, exacerbating service overload",
      "explanation": "The `loadgenerator` continuously sends requests. If it lacks a proper backoff strategy (e.g., exponential backoff) when target services are failing, it can overwhelm already struggling services, contributing to 'wobbly' interactions and preventing recovery."
    },
    {
      "artifact_type": "Go Code (Recommendations Service - Unbounded Queue for Requests)",
      "language": "Go",
      "negative_example": "// recommendationservice/server.go\n// If the service uses an unbounded goroutine pool or channel for processing requests\n// go func() { processRequest(req) }() // Spawns goroutines without limit\n// This can lead to resource exhaustion if requests come in faster than they are processed",
      "explanation": "A hypothetical `recommendationservice` (Go) that uses an unbounded queue or spawns an unlimited number of goroutines to handle incoming requests. While seemingly efficient, this can lead to resource exhaustion (memory, CPU) under heavy load, causing the service to become 'wobbly' and unresponsive, impacting the `checkoutservice` that depends on it."
    }
  ],
  "positive": [
    {
      "artifact_type": "Kubernetes Deployment (Currency Service Readiness Probe)",
      "language": "YAML",
      "positive_example": "      readinessProbe:\n        grpc:\n          port: 7000\n        initialDelaySeconds: 15",
      "explanation": "Similar to the liveness probe, the `currencyservice` defines a gRPC readiness probe. This tells Kubernetes when the service is ready to accept traffic. New or restarting pods won't receive requests until they pass this check, preventing 'wobbly' interactions with unready services."
    },
    {
      "artifact_type": "Go Code (Checkout Service - gRPC Call with Context Timeout)",
      "language": "Go",
      "positive_example": "ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\ndefer cancel()\n\n// Call to cartservice with a 5-second timeout\n_, err := cs.cartServiceClient.AddItem(ctx, cartReq)",
      "explanation": "The `checkoutservice` making a gRPC call to `cartservice` with a `context.WithTimeout`. This ensures that the call will not block indefinitely if `cartservice` is slow or unresponsive, preventing the `checkoutservice` from becoming 'wobbly' itself and potentially cascading failures."
    },
    {
      "artifact_type": "Go Code (Frontend Service - Error Handling for Product Catalog)",
      "language": "Go",
      "positive_example": "products, err := fe.productCatalogServiceClient.ListProducts(ctx, &pb.Empty{})\nif err!= nil {\n    log.Errorf(\"could not retrieve products: %v\", err)\n    // Implement a fallback: serve empty catalog or cached data\n    products = &pb.ListProductsResponse{Products:*pb.Product{}}\n}",
      "explanation": "The `frontend` service (Go) includes error handling for calls to `productcatalogservice`. Instead of crashing or returning a generic error, it logs the error and provides a graceful fallback (e.g., an empty product list). This prevents a single service failure from rendering the entire application unusable."
    },
    {
      "artifact_type": "C# Code (Cart Service - Redis Connection Resilience)",
      "language": "C#",
      "positive_example": "// In CartService.cs, using a robust Redis client library with built-in reconnect logic\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect(\"redis-cart:6379\");\nIDatabase db = redis.GetDatabase();\n// The client library handles transient connection issues and retries automatically.",
      "explanation": "The `cartservice` (C#) uses Redis as its data store. By using a production-grade Redis client library (like StackExchange.Redis), it implicitly gains resilience features such as connection pooling, automatic reconnection, and command retries, making its interaction with Redis less 'wobbly'."
    },
    {
      "artifact_type": "Node.js Code (Payments Service - Asynchronous Email Notification)",
      "language": "Node.js",
      "positive_example": "// paymentservice/server.js\n// Instead of blocking for email, send asynchronously or via message queue\n// Example: Publish event to Kafka/PubSub for emailservice to consume\n// pubsubClient.publish('order-confirmation-topic', orderDetails);\n// Response to client immediately.",
      "explanation": "The `paymentservice` orchestrates payment and email notification. If email notification were a synchronous call, it could make the payment process 'wobbly'. By making it asynchronous (e.g., via a message queue like Kafka/PubSub), the `paymentservice` can complete its core task quickly, improving overall system responsiveness and isolating the payment flow from email service failures."
    },
    {
      "artifact_type": "Python Code (Recommendation Service - Data Aggregation Optimization)",
      "language": "Python",
      "positive_example": "# recommendationservice/recommendation_server.py\n# Fetching product details in a single batch call if API supports it\n# product_ids = [item.product_id for item in cart_items]\n# products = productCatalogServiceClient.GetProductsByIds(product_ids)",
      "explanation": "The `recommendationservice` recommends products based on the cart. Instead of making individual calls for each product in the cart (N+1 problem), it should ideally make a single batch call to the `productcatalogservice`. This optimizes data aggregation, reducing network chatter and improving performance, preventing 'wobbly' interactions due to chatty APIs."
    },
    {
      "artifact_type": "Kubernetes Manifest (Resource Limits and Requests)",
      "language": "YAML",
      "positive_example": "      resources:\n        requests:\n          cpu: 200m\n          memory: 64Mi\n        limits:\n          cpu: 300m\n          memory: 128Mi",
      "explanation": "Defining resource `requests` and `limits` for containers helps prevent services from consuming excessive resources and impacting other services on the same node. This contributes to overall system stability and prevents 'wobbly' behavior caused by resource contention."
    },
    {
      "artifact_type": "Java Code (Ad Service - Circuit Breaker Pattern)",
      "language": "Java",
      "positive_example": "// AdService.java, if integrated with a circuit breaker library like Resilience4j\n// @CircuitBreaker(name = \"productCatalog\", fallbackMethod = \"fallbackAds\")\n// public List<Ad> getAdsFromProductCatalog(List<String> productIds) {... }\n// private List<Ad> fallbackAds(Throwable t) { return defaultAds; }",
      "explanation": "A hypothetical implementation in `adservice` using a circuit breaker pattern (e.g., via Resilience4j). If calls to a dependent service (like `productcatalogservice`) repeatedly fail or exceed thresholds, the circuit opens, preventing further calls and allowing the dependency to recover, thus isolating failures and preventing cascading 'wobbles'."
    },
    {
      "artifact_type": "Go Code (Shipping Service - Retry Logic)",
      "language": "Go",
      "positive_example": "import \"github.com/sethvargo/go-retry\"\n\nfunc (ss *shippingService) getShippingQuoteWithRetry(ctx context.Context, req *pb.GetQuoteRequest) (*pb.GetQuoteResponse, error) {\n    var resp *pb.GetQuoteResponse\n    err := retry.Do(ctx, retry.WithMaxRetries(3, retry.NewConstant(time.Millisecond*100)), func(ctx context.Context) error {\n        var innerErr error\n        resp, innerErr = ss.shippingServiceClient.GetQuote(ctx, req)\n        return innerErr\n    })\n    return resp, err\n}",
      "explanation": "The `shippingservice` implementing retry logic for calls to external or internal dependencies. This helps overcome transient network issues or temporary service unavailability without immediately failing the request, making the interaction more robust and less 'wobbly'"
    }
  ],
   "meta_data": {
    "tags": ["wobbly-interaction", "error-handling", "resilience", "fault-tolerance", "cascading-failure", "timeout", "retry", "circuit-breaker", "fallback"],
    "remediation_difficulty": "High",
    "impact": "Critical"
  }
}