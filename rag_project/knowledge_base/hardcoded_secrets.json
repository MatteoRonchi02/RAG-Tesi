{
  "smell_name": "Hardcoded Secrets",
  "brief_description": "The inclusion of credentials, API keys, tokens, or other sensitive strings directly in the source code, configuration files, or deployment files.",
  "microservices_context": [
    "Particularly critical in containerized environments where configuration files are often versioned in Git.",
    "Increases the attack surface, as anyone with access to the code or the container image can extract the credentials.",
    "Makes credential rotation a complex and error-prone process, requiring a new service build and deployment."
  ],
  "manifestations": [
    {
      "artifact_type": "Source Code",
      "language": "JavaScript",
      "negative_example": "const apiKey = 'sk_live_abcdefghijklmnopqrstuvwxyz1234567890';",
      "explanation": "An API key is hardcoded in a JavaScript constant, making it visible in the frontend or backend."
    },
    {
      "artifact_type": "Source Code",
      "language": "JavaScript",
      "negative_example": "const client = new MongoClient(\"mongodb://user:password@host:27017\");",
      "explanation": "Full database connection URI with username and password hardcoded directly in the application logic."
    },
    {
      "artifact_type": "Configuration File",
      "language": "JSON",
      "negative_example": "{\n  \"db_config\": {\n    \"user\": \"admin\",\n    \"password\": \"Password123!\"\n  }\n}",
      "explanation": "Credentials stored in a JSON configuration file that might be checked into source control."
    },
    {
      "artifact_type": "Source Code",
      "language": "Java",
      "negative_example": "Algorithm algorithm = Algorithm.HMAC256(\"secret\");",
      "explanation": "A static string literal is used as a secret key for signing JWTs, making it readable by anyone with access to the source code or compiled bytecode."
    },
    {
      "artifact_type": "Source Code",
      "language": "Java",
      "negative_example": "static String secret = \"secret\";\n// ... in a method ...\nAlgorithm algorithm = Algorithm.HMAC256(secret);",
      "explanation": "A secret key is assigned to a static variable within the class. Although it's a variable, the value is still hardcoded in the same file and is easily discoverable."
    },
    {
      "artifact_type": "Source Code",
      "language": "Java",
      "negative_example": "String dbPassword = \"MySuperSecretPassword!@#$\";\nConnection conn = DriverManager.getConnection(DB_URL, USER, dbPassword);",
      "explanation": "The database password is hardcoded in a Java string."
    },
    {
    "artifact_type": "Source Code",
    "language": "Java",
    "negative_example": "int VerifyAdmin(String password) {\n  if (!password.equals(\"Mew!\")) {\n    return(0);\n  }\n  // Diagnostic Mode\n  return(1);\n}",
    "explanation": "A hardcoded password, often for a 'backdoor' or diagnostic purposes, is checked directly in the code. This is highly insecure as it's static, visible in the source, and bypasses standard authentication mechanisms."
  },
  {
    "artifact_type": "Source Code",
    "language": "Java",
    "negative_example": "DriverManager.getConnection(url, \"scott\", \"tiger\");",
    "explanation": "Classic hardcoding of database credentials (username and password) directly in the Java Database Connectivity (JDBC) call. This exposes the database to anyone who can read the source code."
  },
    {
      "artifact_type": "Configuration File",
      "language": "Java Properties",
      "negative_example": "spring.datasource.password=MySecretPassword\nsecurity.jwt.secret=super-long-jwt-secret-key-for-signing",
      "explanation": "Secrets for the database and JWT signing are stored in plaintext in a properties file, which is often committed to version control."
    },
    {
      "artifact_type": "Containerization",
      "language": "Dockerfile",
      "negative_example": "ENV SECRET_KEY=my-super-secret-key-that-is-way-too-long",
      "explanation": "An environment variable with a secret is 'baked' into the Docker image, making it inspectable."
    },
    {
      "artifact_type": "Containerization",
      "language": "Dockerfile",
      "negative_example": "ARG api_key\nENV API_KEY=${api_key}",
      "explanation": "Using ARG to pass a secret at build time and then assigning it to an ENV bakes the secret into the image layer history, making it discoverable."
    },
    {
      "artifact_type": "Frontend Framework",
      "language": "Vue",
      "negative_example": "<script>\nexport default {\n  data() {\n    return {\n      apiToken: 'auth-token-is-here'\n    };\n  }\n}\n</script>",
      "explanation": "An authentication token is stored in the state of a Vue component, ending up in the JavaScript bundle sent to the client."
    },
    {
      "artifact_type": "Frontend Framework",
      "language": "Vue",
      "negative_example": "// In .env.local\nVUE_APP_API_KEY=secret-key-goes-here",
      "explanation": "A secret API key is stored in a .env file using a prefix that makes it available in the client-side JavaScript bundle, exposing it to any user."
    },
    {
      "artifact_type": "Frontend Markup",
      "language": "HTML",
      "negative_example": "<input type=\"hidden\" name=\"apiKey\" value=\"some_secret_api_key\">",
      "explanation": "A secret key is stored in a hidden input field in an HTML form, making it visible to anyone who views the page source."
    },
    {
      "artifact_type": "Frontend Markup",
      "language": "HTML",
      "negative_example": "<script>\n  var analyticsToken = 'ua-12345-secret';\n</script>",
      "explanation": "A secret token is defined in an inline script tag within an HTML file, exposing it directly on the client side."
    },
    {
      "artifact_type": "Kubernetes Configuration",
      "language": "YAML",
      "negative_example": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\nspec:\n  containers:\n  - name: app\n    image: busybox\n    env:\n    - name: DB_PASSWORD\n      value: \"password1234\"",
      "explanation": "The secret is placed directly in the YAML manifest, instead of referencing a Kubernetes Secret."
    },
    {
      "artifact_type": "Configuration File",
      "language": "YAML",
      "negative_example": "spring:\n  datasource:\n    username: root\n    password: password123\n  security:\n    oauth2:\n      client:\n        client-secret: my-google-client-secret",
      "explanation": "Database and OAuth2 client secrets are hardcoded in a Spring Boot application.yml file."
    },
    {
      "artifact_type": "Containerization",
      "language": "YAML",
      "negative_example": "services:\n  my_app:\n    image: my_app_image\n    environment:\n      - DB_PASSWORD=my_secret_db_pass",
      "explanation": "A secret is defined directly in the docker-compose.yml file, which is typically version controlled."
    }
  ],
  "positive": [
  {
  "artifact_type": "Source Code",
  "language": "Java",
  "positive_example": "private static String generateToken(String secretKey) {\n    try {\n        // The secretKey variable is safely used here.\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        \n        String token = JWT.create()\n            .withIssuer(\"auth0\")\n            .sign(algorithm);\n        \n        return token;\n\n    } catch (JWTCreationException exception) {\n        // Handle the exception appropriately.\n        System.err.println(\"Error creating JWT: \" + exception.getMessage());\n        return null;\n    }\n}",
 "explanation":"This secure pattern avoids hardcoding by passing the secret key as a parameter to the method. This implies that the secret is loaded from a secure external source (e.g., environment variables, a secrets manager) at a higher level in the application, and the function only receives it as a variable, without knowing its actual value at compile time."
   }  
  ],
  "potential_risks": [
    "Unauthorized access to sensitive data.",
    "Compromise of third-party services (cloud providers, external APIs).",
    "Lateral movement within the infrastructure by an attacker."
  ],
  "metadata": {
    "tags": ["credentials", "secrets", "configuration", "devsecops", "api-key"],
    "remediation_difficulty": "Medium",
    "impact": "High"
  }
}
