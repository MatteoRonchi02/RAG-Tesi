# NAME OF SECURITY SMELL 
 Own Crypto Code
 
# DEFINITION
Development teams that implement their own encryption solutions may end with improper solutions for securing microservices, which may result in possible Confidentiality, Integrity, and Authenticity issues. The use of Own Crypto Code may actually be even worse than not having any encryption solution at all, as it may produce a false sense of security. In all the studies describing the Own Crypto Code smell, the authors point out that the way to mitigate this smell is through the Use of Established Encryption Technologies. In other words, development teams should minimize the amount of encryption code written and maximize the amount of code that they can leverage from “bullet proof” libraries, which have already been heavily tested by the community. Development teams should also avoid the use of experimental encryption algorithms, as they may be subject to various kinds of vulnerabilities, which may be not yet known at the time of their use. Whatever are the programming languages used to implement the microservices forming an application, development teams always have access to reviewed and regularly patched implementations of established encryption algorithms.

# EXAMPLE 1
// Example of custom encryption algorithm (not recommended)
public class CustomCipher {
    private static final int SHIFT_KEY = 3;

    public String encrypt(String data) {
        StringBuilder encrypted = new StringBuilder();
        for (char c : data.toCharArray()) {
            encrypted.append((char) (c + SHIFT_KEY));
        }
        return encrypted.toString();
    }
    
# EXAMPLE 2
    public String decrypt(String data) {
        StringBuilder decrypted = new StringBuilder();
        for (char c : data.toCharArray()) {
            decrypted.append((char) (c - SHIFT_KEY));
        }
        return decrypted.toString();
    }
}

# EXAMPLE 3
// Example of a custom hashing function (not recommended)
public class CustomHasher {
    public int hash(String data) {
        int hash = 7;
        for (int i = 0; i < data.length(); i++) {
            hash = hash * 31 + data.charAt(i);
        }
        return hash;
    }
}

# EXAMPLE 4
// Example of manual key generation (not recommended)
public class CustomKeyGenerator {
    public String generateKey(String passphrase) {
        // Logica semplice per generare una chiave da una passphrase
        return Integer.toHexString(passphrase.hashCode());
    }
}

# EXAMPLE 5
// Example of custom key exchange protocol (not recommended)
public class CustomKeyExchange {
    public String exchangeKeys(String publicKey, String privateKey) {
        // Logica semplice per combinare chiavi pubbliche e private
        return publicKey + privateKey;
    }
}

# EXAMPLE 6
// Example of custom digital signature algorithm (not recommended)
public class CustomSignature {
    public String sign(String data, String key) {
        // Logica semplice per creare una firma
        return data + key;
    }
}
